{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ea283552",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-01-19T00:17:28.806622Z",
     "iopub.status.busy": "2024-01-19T00:17:28.806315Z",
     "iopub.status.idle": "2024-01-19T00:17:29.450519Z",
     "shell.execute_reply": "2024-01-19T00:17:29.449526Z"
    },
    "papermill": {
     "duration": 0.652248,
     "end_time": "2024-01-19T00:17:29.452887",
     "exception": false,
     "start_time": "2024-01-19T00:17:28.800639",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "82910b11",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-01-19T00:17:29.461402Z",
     "iopub.status.busy": "2024-01-19T00:17:29.460971Z",
     "iopub.status.idle": "2024-01-19T00:17:41.223805Z",
     "shell.execute_reply": "2024-01-19T00:17:41.222621Z"
    },
    "papermill": {
     "duration": 11.769144,
     "end_time": "2024-01-19T00:17:41.225745",
     "exception": false,
     "start_time": "2024-01-19T00:17:29.456601",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Import des bibliothèques nécessaires\n",
    "import numpy as np\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense, Flatten\n",
    "from tensorflow.keras.datasets import mnist\n",
    "from sklearn.metrics import accuracy_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "470ac951",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-01-19T00:17:41.234454Z",
     "iopub.status.busy": "2024-01-19T00:17:41.233904Z",
     "iopub.status.idle": "2024-01-19T00:17:42.435535Z",
     "shell.execute_reply": "2024-01-19T00:17:42.434615Z"
    },
    "papermill": {
     "duration": 1.20848,
     "end_time": "2024-01-19T00:17:42.437856",
     "exception": false,
     "start_time": "2024-01-19T00:17:41.229376",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n",
      "11490434/11490434 [==============================] - 1s 0us/step\n"
     ]
    }
   ],
   "source": [
    "# Chargement de l'ensemble de données MNIST\n",
    "(x_train, y_train), (x_test, y_test) = mnist.load_data()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5cc4a9ba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-01-19T00:17:42.448404Z",
     "iopub.status.busy": "2024-01-19T00:17:42.448105Z",
     "iopub.status.idle": "2024-01-19T00:17:42.489750Z",
     "shell.execute_reply": "2024-01-19T00:17:42.488689Z"
    },
    "papermill": {
     "duration": 0.049292,
     "end_time": "2024-01-19T00:17:42.491928",
     "exception": false,
     "start_time": "2024-01-19T00:17:42.442636",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Prétraitement des images\n",
    "x_train = x_train.astype('float32') / 255.0\n",
    "x_test = x_test.astype('float32') / 255.0\n",
    "x_train_flat = x_train.reshape((x_train.shape[0], -1))\n",
    "x_test_flat = x_test.reshape((x_test.shape[0], -1))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a0bb61b1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-01-19T00:17:42.502112Z",
     "iopub.status.busy": "2024-01-19T00:17:42.501769Z",
     "iopub.status.idle": "2024-01-19T00:21:22.688083Z",
     "shell.execute_reply": "2024-01-19T00:21:22.687384Z"
    },
    "papermill": {
     "duration": 220.193593,
     "end_time": "2024-01-19T00:21:22.690144",
     "exception": false,
     "start_time": "2024-01-19T00:17:42.496551",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.svm import SVC\n",
    "\n",
    "# Ajustement des paramètres du SVM\n",
    "svm_model = SVC(kernel='linear', C=1.0)\n",
    "svm_model.fit(x_train_flat, y_train)\n",
    "svm_predictions = svm_model.predict(x_test_flat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "89b3b491",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-01-19T00:21:22.701019Z",
     "iopub.status.busy": "2024-01-19T00:21:22.700517Z",
     "iopub.status.idle": "2024-01-19T00:21:22.846060Z",
     "shell.execute_reply": "2024-01-19T00:21:22.845426Z"
    },
    "papermill": {
     "duration": 0.153244,
     "end_time": "2024-01-19T00:21:22.848137",
     "exception": false,
     "start_time": "2024-01-19T00:21:22.694893",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Définition du modèle du réseau de neurones\n",
    "model = Sequential()\n",
    "model.add(Flatten(input_shape=(28, 28)))  # Ajuster en fonction de la taille de vos images\n",
    "model.add(Dense(128, activation='relu'))\n",
    "model.add(Dense(10, activation='softmax'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8d223802",
   "metadata": {
    "collapsed": true,
    "execution": {
     "iopub.execute_input": "2024-01-19T00:21:22.858720Z",
     "iopub.status.busy": "2024-01-19T00:21:22.858362Z",
     "iopub.status.idle": "2024-01-19T00:27:45.485960Z",
     "shell.execute_reply": "2024-01-19T00:27:45.484712Z"
    },
    "jupyter": {
     "outputs_hidden": true
    },
    "papermill": {
     "duration": 382.635124,
     "end_time": "2024-01-19T00:27:45.487923",
     "exception": false,
     "start_time": "2024-01-19T00:21:22.852799",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n",
      "1500/1500 [==============================] - 5s 3ms/step - loss: 0.2871 - accuracy: 0.9184 - val_loss: 0.1616 - val_accuracy: 0.9524\n",
      "Epoch 2/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 0.1312 - accuracy: 0.9599 - val_loss: 0.1168 - val_accuracy: 0.9638\n",
      "Epoch 3/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 0.0890 - accuracy: 0.9729 - val_loss: 0.0989 - val_accuracy: 0.9700\n",
      "Epoch 4/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 0.0663 - accuracy: 0.9803 - val_loss: 0.0848 - val_accuracy: 0.9747\n",
      "Epoch 5/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 0.0511 - accuracy: 0.9849 - val_loss: 0.0835 - val_accuracy: 0.9767\n",
      "Epoch 6/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 0.0401 - accuracy: 0.9878 - val_loss: 0.0909 - val_accuracy: 0.9739\n",
      "Epoch 7/100\n",
      "1500/1500 [==============================] - 4s 2ms/step - loss: 0.0321 - accuracy: 0.9901 - val_loss: 0.0810 - val_accuracy: 0.9765\n",
      "Epoch 8/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 0.0254 - accuracy: 0.9916 - val_loss: 0.0914 - val_accuracy: 0.9741\n",
      "Epoch 9/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 0.0209 - accuracy: 0.9940 - val_loss: 0.0868 - val_accuracy: 0.9757\n",
      "Epoch 10/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 0.0169 - accuracy: 0.9953 - val_loss: 0.0894 - val_accuracy: 0.9766\n",
      "Epoch 11/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 0.0140 - accuracy: 0.9959 - val_loss: 0.1001 - val_accuracy: 0.9745\n",
      "Epoch 12/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 0.0116 - accuracy: 0.9966 - val_loss: 0.1116 - val_accuracy: 0.9734\n",
      "Epoch 13/100\n",
      "1500/1500 [==============================] - 4s 2ms/step - loss: 0.0102 - accuracy: 0.9969 - val_loss: 0.1047 - val_accuracy: 0.9776\n",
      "Epoch 14/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 0.0087 - accuracy: 0.9976 - val_loss: 0.1028 - val_accuracy: 0.9760\n",
      "Epoch 15/100\n",
      "1500/1500 [==============================] - 4s 2ms/step - loss: 0.0091 - accuracy: 0.9970 - val_loss: 0.1062 - val_accuracy: 0.9753\n",
      "Epoch 16/100\n",
      "1500/1500 [==============================] - 4s 2ms/step - loss: 0.0057 - accuracy: 0.9983 - val_loss: 0.1057 - val_accuracy: 0.9759\n",
      "Epoch 17/100\n",
      "1500/1500 [==============================] - 4s 2ms/step - loss: 0.0058 - accuracy: 0.9983 - val_loss: 0.1071 - val_accuracy: 0.9769\n",
      "Epoch 18/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 0.0068 - accuracy: 0.9979 - val_loss: 0.1122 - val_accuracy: 0.9769\n",
      "Epoch 19/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 0.0061 - accuracy: 0.9984 - val_loss: 0.1121 - val_accuracy: 0.9771\n",
      "Epoch 20/100\n",
      "1500/1500 [==============================] - 4s 2ms/step - loss: 0.0068 - accuracy: 0.9981 - val_loss: 0.1195 - val_accuracy: 0.9772\n",
      "Epoch 21/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 0.0055 - accuracy: 0.9984 - val_loss: 0.1230 - val_accuracy: 0.9753\n",
      "Epoch 22/100\n",
      "1500/1500 [==============================] - 4s 2ms/step - loss: 0.0029 - accuracy: 0.9992 - val_loss: 0.1263 - val_accuracy: 0.9762\n",
      "Epoch 23/100\n",
      "1500/1500 [==============================] - 4s 2ms/step - loss: 0.0067 - accuracy: 0.9978 - val_loss: 0.1248 - val_accuracy: 0.9770\n",
      "Epoch 24/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 0.0019 - accuracy: 0.9995 - val_loss: 0.1182 - val_accuracy: 0.9781\n",
      "Epoch 25/100\n",
      "1500/1500 [==============================] - 4s 2ms/step - loss: 0.0064 - accuracy: 0.9981 - val_loss: 0.1404 - val_accuracy: 0.9761\n",
      "Epoch 26/100\n",
      "1500/1500 [==============================] - 4s 2ms/step - loss: 0.0034 - accuracy: 0.9990 - val_loss: 0.1291 - val_accuracy: 0.9770\n",
      "Epoch 27/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 0.0011 - accuracy: 0.9998 - val_loss: 0.1260 - val_accuracy: 0.9764\n",
      "Epoch 28/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 0.0061 - accuracy: 0.9980 - val_loss: 0.1311 - val_accuracy: 0.9775\n",
      "Epoch 29/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 0.0034 - accuracy: 0.9989 - val_loss: 0.1438 - val_accuracy: 0.9769\n",
      "Epoch 30/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 0.0054 - accuracy: 0.9983 - val_loss: 0.1455 - val_accuracy: 0.9758\n",
      "Epoch 31/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 0.0022 - accuracy: 0.9992 - val_loss: 0.1336 - val_accuracy: 0.9784\n",
      "Epoch 32/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 0.0032 - accuracy: 0.9991 - val_loss: 0.1381 - val_accuracy: 0.9782\n",
      "Epoch 33/100\n",
      "1500/1500 [==============================] - 4s 2ms/step - loss: 0.0047 - accuracy: 0.9986 - val_loss: 0.1493 - val_accuracy: 0.9761\n",
      "Epoch 34/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 0.0024 - accuracy: 0.9992 - val_loss: 0.1641 - val_accuracy: 0.9745\n",
      "Epoch 35/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 0.0026 - accuracy: 0.9992 - val_loss: 0.1502 - val_accuracy: 0.9771\n",
      "Epoch 36/100\n",
      "1500/1500 [==============================] - 4s 2ms/step - loss: 0.0020 - accuracy: 0.9993 - val_loss: 0.1468 - val_accuracy: 0.9768\n",
      "Epoch 37/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 0.0030 - accuracy: 0.9991 - val_loss: 0.1840 - val_accuracy: 0.9742\n",
      "Epoch 38/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 0.0038 - accuracy: 0.9989 - val_loss: 0.1420 - val_accuracy: 0.9789\n",
      "Epoch 39/100\n",
      "1500/1500 [==============================] - 4s 2ms/step - loss: 3.4238e-04 - accuracy: 1.0000 - val_loss: 0.1358 - val_accuracy: 0.9795\n",
      "Epoch 40/100\n",
      "1500/1500 [==============================] - 4s 2ms/step - loss: 5.1790e-05 - accuracy: 1.0000 - val_loss: 0.1383 - val_accuracy: 0.9797\n",
      "Epoch 41/100\n",
      "1500/1500 [==============================] - 4s 2ms/step - loss: 3.2987e-05 - accuracy: 1.0000 - val_loss: 0.1392 - val_accuracy: 0.9798\n",
      "Epoch 42/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 4.3736e-04 - accuracy: 0.9999 - val_loss: 0.2209 - val_accuracy: 0.9694\n",
      "Epoch 43/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 0.0085 - accuracy: 0.9973 - val_loss: 0.1827 - val_accuracy: 0.9748\n",
      "Epoch 44/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 0.0024 - accuracy: 0.9992 - val_loss: 0.1648 - val_accuracy: 0.9780\n",
      "Epoch 45/100\n",
      "1500/1500 [==============================] - 4s 2ms/step - loss: 9.4203e-04 - accuracy: 0.9996 - val_loss: 0.1784 - val_accuracy: 0.9768\n",
      "Epoch 46/100\n",
      "1500/1500 [==============================] - 4s 2ms/step - loss: 0.0042 - accuracy: 0.9987 - val_loss: 0.1702 - val_accuracy: 0.9772\n",
      "Epoch 47/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 0.0032 - accuracy: 0.9990 - val_loss: 0.1725 - val_accuracy: 0.9772\n",
      "Epoch 48/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 0.0012 - accuracy: 0.9996 - val_loss: 0.1687 - val_accuracy: 0.9782\n",
      "Epoch 49/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 0.0033 - accuracy: 0.9990 - val_loss: 0.1761 - val_accuracy: 0.9771\n",
      "Epoch 50/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 0.0021 - accuracy: 0.9994 - val_loss: 0.1787 - val_accuracy: 0.9757\n",
      "Epoch 51/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 0.0032 - accuracy: 0.9987 - val_loss: 0.1825 - val_accuracy: 0.9762\n",
      "Epoch 52/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 0.0014 - accuracy: 0.9995 - val_loss: 0.1700 - val_accuracy: 0.9782\n",
      "Epoch 53/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 0.0014 - accuracy: 0.9997 - val_loss: 0.2062 - val_accuracy: 0.9747\n",
      "Epoch 54/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 0.0063 - accuracy: 0.9980 - val_loss: 0.1881 - val_accuracy: 0.9759\n",
      "Epoch 55/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 0.0022 - accuracy: 0.9993 - val_loss: 0.1800 - val_accuracy: 0.9763\n",
      "Epoch 56/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 0.0020 - accuracy: 0.9994 - val_loss: 0.1996 - val_accuracy: 0.9753\n",
      "Epoch 57/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 0.0025 - accuracy: 0.9993 - val_loss: 0.1886 - val_accuracy: 0.9771\n",
      "Epoch 58/100\n",
      "1500/1500 [==============================] - 4s 2ms/step - loss: 0.0025 - accuracy: 0.9993 - val_loss: 0.1894 - val_accuracy: 0.9774\n",
      "Epoch 59/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 0.0026 - accuracy: 0.9993 - val_loss: 0.2088 - val_accuracy: 0.9753\n",
      "Epoch 60/100\n",
      "1500/1500 [==============================] - 4s 2ms/step - loss: 0.0035 - accuracy: 0.9987 - val_loss: 0.2026 - val_accuracy: 0.9748\n",
      "Epoch 61/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 0.0014 - accuracy: 0.9995 - val_loss: 0.1778 - val_accuracy: 0.9780\n",
      "Epoch 62/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 7.2639e-04 - accuracy: 0.9998 - val_loss: 0.2223 - val_accuracy: 0.9749\n",
      "Epoch 63/100\n",
      "1500/1500 [==============================] - 4s 2ms/step - loss: 0.0050 - accuracy: 0.9981 - val_loss: 0.1966 - val_accuracy: 0.9757\n",
      "Epoch 64/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 0.0018 - accuracy: 0.9995 - val_loss: 0.1952 - val_accuracy: 0.9766\n",
      "Epoch 65/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 0.0018 - accuracy: 0.9994 - val_loss: 0.1966 - val_accuracy: 0.9768\n",
      "Epoch 66/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 0.0032 - accuracy: 0.9988 - val_loss: 0.1960 - val_accuracy: 0.9766\n",
      "Epoch 67/100\n",
      "1500/1500 [==============================] - 4s 2ms/step - loss: 3.6084e-04 - accuracy: 0.9999 - val_loss: 0.1910 - val_accuracy: 0.9783\n",
      "Epoch 68/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 3.4025e-05 - accuracy: 1.0000 - val_loss: 0.1885 - val_accuracy: 0.9788\n",
      "Epoch 69/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 8.9610e-06 - accuracy: 1.0000 - val_loss: 0.1839 - val_accuracy: 0.9791\n",
      "Epoch 70/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 5.0924e-06 - accuracy: 1.0000 - val_loss: 0.1838 - val_accuracy: 0.9789\n",
      "Epoch 71/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 3.6834e-06 - accuracy: 1.0000 - val_loss: 0.1840 - val_accuracy: 0.9792\n",
      "Epoch 72/100\n",
      "1500/1500 [==============================] - 4s 2ms/step - loss: 2.6944e-06 - accuracy: 1.0000 - val_loss: 0.1862 - val_accuracy: 0.9789\n",
      "Epoch 73/100\n",
      "1500/1500 [==============================] - 4s 2ms/step - loss: 1.9343e-06 - accuracy: 1.0000 - val_loss: 0.1859 - val_accuracy: 0.9796\n",
      "Epoch 74/100\n",
      "1500/1500 [==============================] - 4s 2ms/step - loss: 0.0059 - accuracy: 0.9983 - val_loss: 0.2248 - val_accuracy: 0.9763\n",
      "Epoch 75/100\n",
      "1500/1500 [==============================] - 4s 2ms/step - loss: 0.0023 - accuracy: 0.9993 - val_loss: 0.1977 - val_accuracy: 0.9787\n",
      "Epoch 76/100\n",
      "1500/1500 [==============================] - 4s 2ms/step - loss: 2.1168e-04 - accuracy: 1.0000 - val_loss: 0.2028 - val_accuracy: 0.9784\n",
      "Epoch 77/100\n",
      "1500/1500 [==============================] - 4s 2ms/step - loss: 0.0043 - accuracy: 0.9987 - val_loss: 0.2088 - val_accuracy: 0.9781\n",
      "Epoch 78/100\n",
      "1500/1500 [==============================] - 4s 2ms/step - loss: 5.8710e-04 - accuracy: 0.9998 - val_loss: 0.2315 - val_accuracy: 0.9753\n",
      "Epoch 79/100\n",
      "1500/1500 [==============================] - 4s 2ms/step - loss: 0.0018 - accuracy: 0.9996 - val_loss: 0.2270 - val_accuracy: 0.9760\n",
      "Epoch 80/100\n",
      "1500/1500 [==============================] - 4s 2ms/step - loss: 0.0022 - accuracy: 0.9992 - val_loss: 0.2178 - val_accuracy: 0.9781\n",
      "Epoch 81/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 3.1811e-04 - accuracy: 0.9999 - val_loss: 0.2152 - val_accuracy: 0.9775\n",
      "Epoch 82/100\n",
      "1500/1500 [==============================] - 4s 2ms/step - loss: 0.0038 - accuracy: 0.9986 - val_loss: 0.2301 - val_accuracy: 0.9757\n",
      "Epoch 83/100\n",
      "1500/1500 [==============================] - 4s 2ms/step - loss: 0.0020 - accuracy: 0.9995 - val_loss: 0.2201 - val_accuracy: 0.9768\n",
      "Epoch 84/100\n",
      "1500/1500 [==============================] - 4s 2ms/step - loss: 0.0027 - accuracy: 0.9991 - val_loss: 0.2248 - val_accuracy: 0.9764\n",
      "Epoch 85/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 0.0016 - accuracy: 0.9994 - val_loss: 0.2141 - val_accuracy: 0.9790\n",
      "Epoch 86/100\n",
      "1500/1500 [==============================] - 4s 2ms/step - loss: 0.0020 - accuracy: 0.9995 - val_loss: 0.2812 - val_accuracy: 0.9720\n",
      "Epoch 87/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 0.0023 - accuracy: 0.9992 - val_loss: 0.2390 - val_accuracy: 0.9763\n",
      "Epoch 88/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 0.0019 - accuracy: 0.9994 - val_loss: 0.2460 - val_accuracy: 0.9757\n",
      "Epoch 89/100\n",
      "1500/1500 [==============================] - 4s 2ms/step - loss: 0.0029 - accuracy: 0.9991 - val_loss: 0.2475 - val_accuracy: 0.9762\n",
      "Epoch 90/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 9.8775e-04 - accuracy: 0.9997 - val_loss: 0.2260 - val_accuracy: 0.9780\n",
      "Epoch 91/100\n",
      "1500/1500 [==============================] - 4s 2ms/step - loss: 0.0031 - accuracy: 0.9991 - val_loss: 0.2513 - val_accuracy: 0.9765\n",
      "Epoch 92/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 7.2614e-04 - accuracy: 0.9998 - val_loss: 0.2229 - val_accuracy: 0.9773\n",
      "Epoch 93/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 0.0025 - accuracy: 0.9993 - val_loss: 0.2404 - val_accuracy: 0.9767\n",
      "Epoch 94/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 0.0028 - accuracy: 0.9991 - val_loss: 0.2494 - val_accuracy: 0.9758\n",
      "Epoch 95/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 5.8256e-04 - accuracy: 0.9998 - val_loss: 0.2305 - val_accuracy: 0.9789\n",
      "Epoch 96/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 6.7088e-04 - accuracy: 0.9998 - val_loss: 0.2422 - val_accuracy: 0.9763\n",
      "Epoch 97/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 0.0044 - accuracy: 0.9987 - val_loss: 0.2520 - val_accuracy: 0.9762\n",
      "Epoch 98/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 0.0021 - accuracy: 0.9993 - val_loss: 0.2484 - val_accuracy: 0.9748\n",
      "Epoch 99/100\n",
      "1500/1500 [==============================] - 4s 2ms/step - loss: 4.9506e-04 - accuracy: 0.9999 - val_loss: 0.2318 - val_accuracy: 0.9790\n",
      "Epoch 100/100\n",
      "1500/1500 [==============================] - 4s 3ms/step - loss: 0.0012 - accuracy: 0.9996 - val_loss: 0.3285 - val_accuracy: 0.9694\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.src.callbacks.History at 0x7dfa62105ba0>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Compilation et entraînement du modèle de réseau de neurones\n",
    "model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n",
    "model.fit(x_train, y_train, epochs=100, batch_size=32, validation_split=0.2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "0261f914",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-01-19T00:27:46.331833Z",
     "iopub.status.busy": "2024-01-19T00:27:46.331502Z",
     "iopub.status.idle": "2024-01-19T00:27:47.097178Z",
     "shell.execute_reply": "2024-01-19T00:27:47.096165Z"
    },
    "papermill": {
     "duration": 1.218798,
     "end_time": "2024-01-19T00:27:47.099230",
     "exception": false,
     "start_time": "2024-01-19T00:27:45.880432",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "313/313 [==============================] - 0s 1ms/step\n",
      "[7 2 1 ... 4 5 6]\n"
     ]
    }
   ],
   "source": [
    "# Prédictions du réseau de neurones sur l'ensemble de test\n",
    "nn_predictions = np.argmax(model.predict(x_test), axis=1)\n",
    "print(nn_predictions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "9297ab23",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-01-19T00:27:47.900568Z",
     "iopub.status.busy": "2024-01-19T00:27:47.900163Z",
     "iopub.status.idle": "2024-01-19T00:27:47.924985Z",
     "shell.execute_reply": "2024-01-19T00:27:47.924199Z"
    },
    "papermill": {
     "duration": 0.422219,
     "end_time": "2024-01-19T00:27:47.926855",
     "exception": false,
     "start_time": "2024-01-19T00:27:47.504636",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "KNeighborsClassifier()"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Mise en place de k-NN\n",
    "knn_model = KNeighborsClassifier(n_neighbors=5)  # Ajuster la valeur de 'k' selon vos besoins\n",
    "knn_model.fit(x_train_flat, y_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e51c032e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-01-19T00:27:48.773970Z",
     "iopub.status.busy": "2024-01-19T00:27:48.773671Z",
     "iopub.status.idle": "2024-01-19T00:28:01.071063Z",
     "shell.execute_reply": "2024-01-19T00:28:01.069661Z"
    },
    "papermill": {
     "duration": 12.750618,
     "end_time": "2024-01-19T00:28:01.073433",
     "exception": false,
     "start_time": "2024-01-19T00:27:48.322815",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Prédictions de k-NN sur l'ensemble de test\n",
    "knn_predictions = knn_model.predict(x_test_flat)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "27976b01",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-01-19T00:28:01.862652Z",
     "iopub.status.busy": "2024-01-19T00:28:01.862063Z",
     "iopub.status.idle": "2024-01-19T00:28:01.865837Z",
     "shell.execute_reply": "2024-01-19T00:28:01.865287Z"
    },
    "papermill": {
     "duration": 0.400133,
     "end_time": "2024-01-19T00:28:01.867822",
     "exception": false,
     "start_time": "2024-01-19T00:28:01.467689",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Combinaison des prédictions (vote majoritaire)\n",
    "hybrid_predictions = np.argmin(np.vstack((nn_predictions, knn_predictions)), axis=0)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "8d66f219",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-01-19T00:28:02.697399Z",
     "iopub.status.busy": "2024-01-19T00:28:02.696809Z",
     "iopub.status.idle": "2024-01-19T00:28:02.704065Z",
     "shell.execute_reply": "2024-01-19T00:28:02.703409Z"
    },
    "papermill": {
     "duration": 0.446357,
     "end_time": "2024-01-19T00:28:02.705725",
     "exception": false,
     "start_time": "2024-01-19T00:28:02.259368",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Évaluation des performances\n",
    "nn_accuracy = accuracy_score(y_test, nn_predictions)\n",
    "knn_accuracy = accuracy_score(y_test, knn_predictions)\n",
    "hybrid_accuracy = accuracy_score(y_test, hybrid_predictions)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "1a864dce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-01-19T00:28:03.489583Z",
     "iopub.status.busy": "2024-01-19T00:28:03.488973Z",
     "iopub.status.idle": "2024-01-19T00:28:03.493758Z",
     "shell.execute_reply": "2024-01-19T00:28:03.492615Z"
    },
    "papermill": {
     "duration": 0.399537,
     "end_time": "2024-01-19T00:28:03.495497",
     "exception": false,
     "start_time": "2024-01-19T00:28:03.095960",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Neural Network Accuracy: 0.9739\n",
      "K-NN Accuracy: 0.9688\n",
      "Hybrid Model Accuracy: 0.0989\n"
     ]
    }
   ],
   "source": [
    "# Affichage des résultats\n",
    "print(f\"Neural Network Accuracy: {nn_accuracy}\")\n",
    "print(f\"K-NN Accuracy: {knn_accuracy}\")\n",
    "print(f\"Hybrid Model Accuracy: {hybrid_accuracy}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "0bf26569",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-01-19T00:28:04.354386Z",
     "iopub.status.busy": "2024-01-19T00:28:04.353766Z",
     "iopub.status.idle": "2024-01-19T00:28:04.360692Z",
     "shell.execute_reply": "2024-01-19T00:28:04.359407Z"
    },
    "papermill": {
     "duration": 0.478042,
     "end_time": "2024-01-19T00:28:04.363031",
     "exception": false,
     "start_time": "2024-01-19T00:28:03.884989",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hybrid Model (with SVM) Accuracy: 0.0987\n"
     ]
    }
   ],
   "source": [
    "\n",
    "hybrid_predictions_svm = np.argmin(np.vstack((nn_predictions, svm_predictions)), axis=0)\n",
    "\n",
    "# Évaluation des performances du modèle hybride avec SVM\n",
    "hybrid_accuracy_svm = accuracy_score(y_test, hybrid_predictions_svm)\n",
    "print(f\"Hybrid Model (with SVM) Accuracy: {hybrid_accuracy_svm}\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [],
   "dockerImageVersionId": 30635,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 640.716064,
   "end_time": "2024-01-19T00:28:06.179771",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-01-19T00:17:25.463707",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
